 unit uPSI_SysUtils;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
  Windows
  ,SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_SysUtils = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;


{ compile-time registration functions }
procedure SIRegister_Exception(CL: TPSPascalCompiler);
procedure SIRegister_SysUtils(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_SysUtils_Routines(S: TPSExec);
procedure RIRegister_Exception(CL: TPSRuntimeClassImporter);

procedure RIRegister_SysUtils(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_SysUtils]);
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_Exception(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TObject', 'Exception') do
  with CL.AddClassN(CL.FindClass('TObject'),'Exception') do
  begin
    RegisterMethod('Constructor Create( const Msg : string)');
    RegisterMethod('Constructor CreateFmt( const Msg : string; const Args : array of const)');
    RegisterMethod('Constructor CreateRes( Ident : Integer)');
    RegisterMethod('Constructor CreateResStr( ResStringRec : PResStringRec)');
    RegisterMethod('Constructor CreateResFmt( Ident : Integer; const Args : array of const)');
    RegisterMethod('Constructor CreateResFmtStr( ResStringRec : PResStringRec; const Args : array of const)');
    RegisterMethod('Constructor CreateHelp( const Msg : string; AHelpContext : Integer)');
    RegisterMethod('Constructor CreateFmtHelp( const Msg : string; const Args : array of const; AHelpContext : Integer)');
    RegisterMethod('Constructor CreateResHelp( Ident : Integer; AHelpContext : Integer)');
    RegisterMethod('Constructor CreateResStrHelp( ResStringRec : PResStringRec; AHelpContext : Integer)');
    RegisterMethod('Constructor CreateResFmtHelp( ResStringRec : PResStringRec; const Args : array of const; AHelpContext : Integer)');
    RegisterMethod('Constructor CreateResStrFmtHelp( Ident : Integer; const Args : array of const; AHelpContext : Integer)');
    RegisterProperty('HelpContext', 'Integer', iptrw);
    RegisterProperty('Message', 'string', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_SysUtils(CL: TPSPascalCompiler);
begin
 CL.AddConstantN('fmOpenRead','LongWord').SetUInt( $0000);
 CL.AddConstantN('fmOpenWrite','LongWord').SetUInt( $0001);
 CL.AddConstantN('fmOpenReadWrite','LongWord').SetUInt( $0002);
 CL.AddConstantN('fmShareCompat','LongWord').SetUInt( $0000);
 CL.AddConstantN('fmShareExclusive','LongWord').SetUInt( $0010);
 CL.AddConstantN('fmShareDenyWrite','LongWord').SetUInt( $0020);
 CL.AddConstantN('fmShareDenyRead','LongWord').SetUInt( $0030);
 CL.AddConstantN('fmShareDenyNone','LongWord').SetUInt( $0040);
 CL.AddConstantN('faReadOnly','LongWord').SetUInt( $00000001);
 CL.AddConstantN('faHidden','LongWord').SetUInt( $00000002);
 CL.AddConstantN('faSysFile','LongWord').SetUInt( $00000004);
 CL.AddConstantN('faVolumeID','LongWord').SetUInt( $00000008);
 CL.AddConstantN('faDirectory','LongWord').SetUInt( $00000010);
 CL.AddConstantN('faArchive','LongWord').SetUInt( $00000020);
 CL.AddConstantN('faSymLink','LongWord').SetUInt( $00000040);
 CL.AddConstantN('faAnyFile','LongWord').SetUInt( $0000003F);
 CL.AddConstantN('HoursPerDay','LongInt').SetInt( 24);
 CL.AddConstantN('MinsPerHour','LongInt').SetInt( 60);
 CL.AddConstantN('SecsPerMin','LongInt').SetInt( 60);
 CL.AddConstantN('MSecsPerSec','LongInt').SetInt( 1000);
 CL.AddConstantN('MinsPerDay','LongInt').SetInt( 1440);
 CL.AddConstantN('SecsPerDay','LongInt').SetInt( 86400);
 CL.AddConstantN('MSecsPerDay','LongInt').SetInt( 86400000);
 CL.AddConstantN('DateDelta','LongInt').SetInt( 693594);
 CL.AddConstantN('UnixDateDelta','LongInt').SetInt( 25569);
  CL.AddTypeS('TSysCharSet', 'set of Char');

  CL.AddTypeS('TFileName', 'string');
  CL.AddTypeS('TSearchRec', 'record Time : Integer; Size : Integer; Attr : Inte'
   +'ger; Name : TFileName; ExcludeAttr : Integer; FindHandle : THandle; end');
  CL.AddTypeS('TFloatValue', '( fvExtended, fvCurrency )');
  CL.AddTypeS('TFloatFormat', '( ffGeneral, ffExponent, ffFixed, ffNumber, ffCu'
   +'rrency )');
  CL.AddTypeS('TTimeStamp', 'record Time : Integer; Date : Integer; end');
  CL.AddTypeS('TMbcsByteType', '( mbSingleByte, mbLeadByte, mbTrailByte )');
  CL.AddTypeS('TSysLocale', 'record DefaultLCID : Integer; PriLangID : Integer;'
   +' SubLangID : Integer; FarEast : Boolean; MiddleEast : Boolean; end');
  CL.AddTypeS('TFormatSettings', 'record CurrencyFormat : Byte; NegCurrFormat :'
   +' Byte; ThousandSeparator : Char; DecimalSeparator : Char; CurrencyDecimals'
   +' : Byte; DateSeparator : Char; TimeSeparator : Char; ListSeparator : Char;'
   +' CurrencyString : string; ShortDateFormat : string; LongDateFormat : strin'
   +'g; TimeAMString : string; TimePMString : string; ShortTimeFormat : string;'
   +' LongTimeFormat : string; TwoDigitYearCenturyWindow : Word; end');

  CL.AddTypeS('TEraRange', 'record StartDate : Integer; EndDate : Integer; end');
  SIRegister_Exception(CL);
  //CL.AddTypeS('ExceptClass', 'class of Exception');

 CL.AddConstantN('MAX_PATH','LongInt').SetInt( 4095);
 CL.AddDelphiFunction('Function CheckWin32Version( AMajor : Integer; AMinor : Integer) : Boolean');
 CL.AddDelphiFunction('Function GetFileVersion( const AFileName : string) : Cardinal');
 CL.AddConstantN('MaxEraCount','LongInt').SetInt( 7);
 CL.AddConstantN('PathDelim','String').SetString( '\');
 CL.AddConstantN('DriveDelim','String').SetString( ':');
 CL.AddConstantN('PathSep','String').SetString( ';');
 CL.AddTypeS('TTextLineBreakStyle', '(tlbsLF, tlbsCRLF)');
 CL.AddDelphiFunction('Function CompareStr( const S1, S2 : string) : Integer');
 CL.AddDelphiFunction('Function CompareText( const S1, S2 : string) : Integer');
 CL.AddDelphiFunction('Function SameText( const S1, S2 : string) : Boolean');
 CL.AddDelphiFunction('Function AnsiCompareStr( const S1, S2 : string) : Integer');
 CL.AddDelphiFunction('Function AnsiSameStr( const S1, S2 : string) : Boolean');
 CL.AddDelphiFunction('Function AnsiCompareText( const S1, S2 : string) : Integer');
 CL.AddDelphiFunction('Function AnsiSameText( const S1, S2 : string) : Boolean');
 CL.AddDelphiFunction('Function AnsiStrComp( S1, S2 : PChar) : Integer');
 CL.AddDelphiFunction('Function AnsiStrIComp( S1, S2 : PChar) : Integer');
 CL.AddDelphiFunction('Function AnsiStrLComp( S1, S2 : PChar; MaxLen : Cardinal) : Integer');
 CL.AddDelphiFunction('Function AnsiStrLIComp( S1, S2 : PChar; MaxLen : Cardinal) : Integer');
 CL.AddDelphiFunction('Function AnsiStrLower( Str : PChar) : PChar');
 CL.AddDelphiFunction('Function AnsiStrUpper( Str : PChar) : PChar');
 CL.AddDelphiFunction('Function AnsiLastChar( const S : string) : PChar');
 CL.AddDelphiFunction('Function AnsiStrLastChar( P : PChar) : PChar');
 CL.AddDelphiFunction('Function WideUpperCase( const S : WideString) : WideString');
 CL.AddDelphiFunction('Function WideLowerCase( const S : WideString) : WideString');
 CL.AddDelphiFunction('Function WideCompareStr( const S1, S2 : WideString) : Integer');
 CL.AddDelphiFunction('Function WideSameStr( const S1, S2 : WideString) : Boolean');
 CL.AddDelphiFunction('Function WideCompareText( const S1, S2 : WideString) : Integer');
 CL.AddDelphiFunction('Function WideSameText( const S1, S2 : WideString) : Boolean');
 CL.AddDelphiFunction('Function QuotedStr( const S : string) : string');
 CL.AddDelphiFunction('Function AnsiQuotedStr( const S : string; Quote : Char) : string');
 CL.AddDelphiFunction('Function AnsiExtractQuotedStr( var Src : PChar; Quote : Char) : string');
 CL.AddDelphiFunction('Function AnsiDequotedStr( const S : string; AQuote : Char) : string');
 CL.AddDelphiFunction('Function AdjustLineBreaks( const S : string; Style : TTextLineBreakStyle) : string');
 CL.AddDelphiFunction('Function IsValidIdent( const Ident : string) : Boolean');
 CL.AddDelphiFunction('Function IntToHex( Value : Integer; Digits : Integer) : string');
 CL.AddDelphiFunction('Function TryStrToInt( const S : string; out Value : Integer) : Boolean');
 CL.AddDelphiFunction('Function TryStrToInt64( const S : string; out Value : Int64) : Boolean');
 CL.AddConstantN('DefaultTrueBoolStr','String').SetString( 'True');
 CL.AddConstantN('DefaultFalseBoolStr','String').SetString( 'False');
 CL.AddDelphiFunction('Function StrToBool( const S : string) : Boolean');
 CL.AddDelphiFunction('Function StrToBoolDef( const S : string; const Default : Boolean) : Boolean');
 CL.AddDelphiFunction('Function TryStrToBool( const S : string; out Value : Boolean) : Boolean');
 CL.AddDelphiFunction('Function BoolToStr( B : Boolean; UseBoolStrs : Boolean) : string');
 CL.AddDelphiFunction('Function LoadStr( Ident : Integer) : string');
 CL.AddDelphiFunction('Function FmtLoadStr( Ident : Integer; const Args : array of const) : string');
 CL.AddDelphiFunction('Function FileOpen( const FileName : string; Mode : LongWord) : Integer');
 CL.AddDelphiFunction('Function FileCreate( const FileName : string) : Integer');
 CL.AddDelphiFunction('Function FileSeek( Handle, Offset, Origin : Integer) : Integer');
 CL.AddDelphiFunction('Procedure FileClose( Handle : Integer)');
 CL.AddDelphiFunction('Function FileAge( const FileName : string) : Integer');
 CL.AddDelphiFunction('Function FileExists( const FileName : string) : Boolean');
 CL.AddDelphiFunction('Function DirectoryExists( const Directory : string) : Boolean');
 CL.AddDelphiFunction('Function ForceDirectories( Dir : string) : Boolean');
 CL.AddDelphiFunction('Function FindFirst( const Path : string; Attr : Integer; var F : TSearchRec) : Integer');
 CL.AddDelphiFunction('Function FindNext( var F : TSearchRec) : Integer');
 CL.AddDelphiFunction('Procedure FindClose( var F : TSearchRec)');
 CL.AddDelphiFunction('Function FileGetDate( Handle : Integer) : Integer');
 CL.AddDelphiFunction('Function FileSetDate( const FileName : string; Age : Integer) : Integer');
 CL.AddDelphiFunction('Function FileIsReadOnly( const FileName : string) : Boolean');
 CL.AddDelphiFunction('Function FileSetReadOnly( const FileName : string; ReadOnly : Boolean) : Boolean');
 CL.AddDelphiFunction('Function DeleteFile( const FileName : string) : Boolean');
 CL.AddDelphiFunction('Function RenameFile( const OldName, NewName : string) : Boolean');
 CL.AddDelphiFunction('Function ChangeFileExt( const FileName, Extension : string) : string');
 CL.AddDelphiFunction('Function ExtractFilePath( const FileName : string) : string');
 CL.AddDelphiFunction('Function ExtractFileDir( const FileName : string) : string');
 CL.AddDelphiFunction('Function ExtractFileDrive( const FileName : string) : string');
 CL.AddDelphiFunction('Function ExtractFileName( const FileName : string) : string');
 CL.AddDelphiFunction('Function ExtractFileExt( const FileName : string) : string');
 CL.AddDelphiFunction('Function ExpandFileName( const FileName : string) : string');
  CL.AddTypeS('TFilenameCaseMatch', '( mkNone, mkExactMatch, mkSingleMatch, mkA'
   +'mbiguous )');
 CL.AddDelphiFunction('Function ExpandFileNameCase( const FileName : string; out MatchFound : TFilenameCaseMatch) : string');
 CL.AddDelphiFunction('Function ExpandUNCFileName( const FileName : string) : string');
 CL.AddDelphiFunction('Function ExtractRelativePath( const BaseName, DestName : string) : string');
 CL.AddDelphiFunction('Function ExtractShortPathName( const FileName : string) : string');
 CL.AddDelphiFunction('Function FileSearch( const Name, DirList : string) : string');
 CL.AddDelphiFunction('Function DiskFree( Drive : Byte) : Int64');
 CL.AddDelphiFunction('Function DiskSize( Drive : Byte) : Int64');
 CL.AddDelphiFunction('Function FileDateToDateTime( FileDate : Integer) : TDateTime');
 CL.AddDelphiFunction('Function DateTimeToFileDate( DateTime : TDateTime) : Integer');
 CL.AddDelphiFunction('Function GetCurrentDir : string');
 CL.AddDelphiFunction('Function SetCurrentDir( const Dir : string) : Boolean');
 CL.AddDelphiFunction('Function CreateDir( const Dir : string) : Boolean');
 CL.AddDelphiFunction('Function RemoveDir( const Dir : string) : Boolean');
 CL.AddDelphiFunction('Function Format( const Format : string; const Args : array of const) : string');
 CL.AddDelphiFunction('Function CurrToStr( Value : Currency) : string');
 CL.AddConstantN('MinCurrency','Currency').SetExtended( - 922337203685477.5807);
 CL.AddConstantN('MaxCurrency','Currency').SetExtended( 922337203685477.5807);
 CL.AddDelphiFunction('Function FloatToCurr( const Value : Extended) : Currency');
 CL.AddDelphiFunction('Function TryFloatToCurr( const Value : Extended; out AResult : Currency) : Boolean');
 CL.AddDelphiFunction('Function FloatToStrF( Value : Extended; Format : TFloatFormat; Precision, Digits : Integer) : string');
 CL.AddDelphiFunction('Function CurrToStrF( Value : Currency; Format : TFloatFormat; Digits : Integer) : string');
 CL.AddDelphiFunction('Function FormatFloat( const Format : string; Value : Extended) : string');
 CL.AddDelphiFunction('Function FormatCurr( const Format : string; Value : Currency) : string');
 CL.AddDelphiFunction('Function StrToFloatDef( const S : string; const Default : Extended) : Extended');
 CL.AddDelphiFunction('Function TryStrToFloat( const S : string; out Value : Extended) : Boolean');
 CL.AddDelphiFunction('Function TryStrToFloat( const S : string; out Value : Double) : Boolean');
 CL.AddDelphiFunction('Function TryStrToFloat( const S : string; out Value : Single) : Boolean');
 CL.AddDelphiFunction('Function StrToCurr( const S : string) : Currency');
 CL.AddDelphiFunction('Function StrToCurrDef( const S : string; const Default : Currency) : Currency');
 CL.AddDelphiFunction('Function TryStrToCurr( const S : string; out Value : Currency) : Boolean');
 CL.AddDelphiFunction('Function DateTimeToTimeStamp( DateTime : TDateTime) : TTimeStamp');
 CL.AddDelphiFunction('Function TimeStampToDateTime( const TimeStamp : TTimeStamp) : TDateTime');
 CL.AddDelphiFunction('Function MSecsToTimeStamp( MSecs : Extended) : TTimeStamp');
 CL.AddDelphiFunction('Function TimeStampToMSecs( const TimeStamp : TTimeStamp) : Extended');
 CL.AddDelphiFunction('Function EncodeDate( Year, Month, Day : Word) : TDateTime');
 CL.AddDelphiFunction('Function EncodeTime( Hour, Min, Sec, MSec : Word) : TDateTime');
 CL.AddDelphiFunction('Function TryEncodeDate( Year, Month, Day : Word; out Date : TDateTime) : Boolean');
 CL.AddDelphiFunction('Function TryEncodeTime( Hour, Min, Sec, MSec : Word; out Time : TDateTime) : Boolean');
 CL.AddDelphiFunction('Procedure DecodeDate( const DateTime : TDateTime; var Year, Month, Day : Word)');
 CL.AddDelphiFunction('Function DecodeDateFully( const DateTime : TDateTime; var Year, Month, Day, DOW : Word) : Boolean');
 CL.AddDelphiFunction('Function InternalDecodeDate( const DateTime : TDateTime; var Year, Month, Day, DOW : Word) : Boolean');
 CL.AddDelphiFunction('Procedure DecodeTime( const DateTime : TDateTime; var Hour, Min, Sec, MSec : Word)');
 CL.AddDelphiFunction('Function DayOfWeek( const DateTime : TDateTime) : Word');
 CL.AddDelphiFunction('Function Date : TDateTime');
 CL.AddDelphiFunction('Function Time : TDateTime');
 CL.AddDelphiFunction('Function GetTime : TDateTime');
 CL.AddDelphiFunction('Function Now : TDateTime');
 CL.AddDelphiFunction('Function CurrentYear : Word');
 CL.AddDelphiFunction('Function IncMonth( const DateTime : TDateTime; NumberOfMonths : Integer) : TDateTime');
 CL.AddDelphiFunction('Procedure IncAMonth( var Year, Month, Day : Word; NumberOfMonths : Integer)');
 CL.AddDelphiFunction('Procedure ReplaceTime( var DateTime : TDateTime; const NewTime : TDateTime)');
 CL.AddDelphiFunction('Procedure ReplaceDate( var DateTime : TDateTime; const NewDate : TDateTime)');
 CL.AddDelphiFunction('Function IsLeapYear( Year : Word) : Boolean');
 CL.AddDelphiFunction('Function DateToStr( const DateTime : TDateTime) : string');
 CL.AddDelphiFunction('Function TimeToStr( const DateTime : TDateTime) : string');
 CL.AddDelphiFunction('Function DateTimeToStr( const DateTime : TDateTime) : string');
 CL.AddDelphiFunction('Function StrToDate( const S : string) : TDateTime');
 CL.AddDelphiFunction('Function StrToDateDef( const S : string; const Default : TDateTime) : TDateTime');
 CL.AddDelphiFunction('Function TryStrToDate( const S : string; out Value : TDateTime) : Boolean');
 CL.AddDelphiFunction('Function StrToTime( const S : string) : TDateTime');
 CL.AddDelphiFunction('Function StrToTimeDef( const S : string; const Default : TDateTime) : TDateTime');
 CL.AddDelphiFunction('Function TryStrToTime( const S : string; out Value : TDateTime) : Boolean');
 CL.AddDelphiFunction('Function StrToDateTime( const S : string) : TDateTime');
 CL.AddDelphiFunction('Function StrToDateTimeDef( const S : string; const Default : TDateTime) : TDateTime');
 CL.AddDelphiFunction('Function TryStrToDateTime( const S : string; out Value : TDateTime) : Boolean');
 CL.AddDelphiFunction('Function FormatDateTime( const Format : string; DateTime : TDateTime) : string');
 CL.AddDelphiFunction('Procedure DateTimeToString( var Result : string; const Format : string; DateTime : TDateTime)');
 CL.AddConstantN('MinDateTime','TDateTime').SetExtended( - 657434.0);
 CL.AddConstantN('MaxDateTime','TDateTime').SetExtended( 2958465.99999);
 CL.AddDelphiFunction('Function FloatToDateTime( const Value : Extended) : TDateTime');
 CL.AddDelphiFunction('Function TryFloatToDateTime( const Value : Extended; out AResult : TDateTime) : Boolean');
 CL.AddDelphiFunction('Procedure Sleep( milliseconds : Cardinal)');
 CL.AddDelphiFunction('Procedure Abort');
 CL.AddDelphiFunction('Procedure Beep');
 CL.AddDelphiFunction('Function ByteType( const S : string; Index : Integer) : TMbcsByteType');
 CL.AddDelphiFunction('Function StrByteType( Str : PChar; Index : Cardinal) : TMbcsByteType');
 CL.AddDelphiFunction('Function ByteToCharLen( const S : string; MaxLen : Integer) : Integer');
 CL.AddDelphiFunction('Function CharToByteLen( const S : string; MaxLen : Integer) : Integer');
 CL.AddDelphiFunction('Function ByteToCharIndex( const S : string; Index : Integer) : Integer');
 CL.AddDelphiFunction('Function CharToByteIndex( const S : string; Index : Integer) : Integer');
 CL.AddDelphiFunction('Function StrCharLength( const Str : PChar) : Integer');
 CL.AddDelphiFunction('Function StrNextChar( const Str : PChar) : PChar');
 CL.AddDelphiFunction('Function CharLength( const S : String; Index : Integer) : Integer');
 CL.AddDelphiFunction('Function NextCharIndex( const S : String; Index : Integer) : Integer');
 CL.AddDelphiFunction('Function IsPathDelimiter( const S : string; Index : Integer) : Boolean');
 CL.AddDelphiFunction('Function IsDelimiter( const Delimiters, S : string; Index : Integer) : Boolean');
 CL.AddDelphiFunction('Function IncludeTrailingPathDelimiter( const S : string) : string');
 CL.AddDelphiFunction('Function IncludeTrailingBackslash( const S : string) : string');
 CL.AddDelphiFunction('Function ExcludeTrailingPathDelimiter( const S : string) : string');
 CL.AddDelphiFunction('Function ExcludeTrailingBackslash( const S : string) : string');
 CL.AddDelphiFunction('Function LastDelimiter( const Delimiters, S : string) : Integer');
 CL.AddDelphiFunction('Function AnsiCompareFileName( const S1, S2 : string) : Integer');
 CL.AddDelphiFunction('Function SameFileName( const S1, S2 : string) : Boolean');
 CL.AddDelphiFunction('Function AnsiLowerCaseFileName( const S : string) : string');
 CL.AddDelphiFunction('Function AnsiUpperCaseFileName( const S : string) : string');
 CL.AddDelphiFunction('Function AnsiPos( const Substr, S : string) : Integer');
 CL.AddDelphiFunction('Function AnsiStrPos( Str, SubStr : PChar) : PChar');
 CL.AddDelphiFunction('Function AnsiStrRScan( Str : PChar; char : Char) : PChar');
 CL.AddDelphiFunction('Function AnsiStrScan( Str : PChar; char : Char) : PChar');
 CL.AddTypeS('TRepFlag', '(rfReplaceAll, rfIgnoreCase)');
 CL.AddTypeS('TReplaceFlags', 'set of TRepFlag');
 CL.AddDelphiFunction('Function StringReplace( const S, OldPattern, NewPattern : string; Flags : TReplaceFlags) : string');
 CL.AddDelphiFunction('Function WrapText( const Line, BreakStr : string; const BreakChars : TSysCharSet; MaxCol : Integer) : string');

 CL.AddDelphiFunction('Function FindCmdLineSwitch( const Switch : string; const Chars : TSysCharSet; IgnoreCase : Boolean) : Boolean');
 CL.AddDelphiFunction('Function CreateGUID( out Guid : TGUID) : HResult');
 CL.AddDelphiFunction('Function StringToGUID( const S : string) : TGUID');
 CL.AddDelphiFunction('Function GUIDToString( const GUID : TGUID) : string');
 CL.AddDelphiFunction('Function IsEqualGUID( const guid1, guid2 : TGUID) : Boolean');
 CL.AddConstantN('pfNeverBuild','LongWord').SetUInt( $00000001);
 CL.AddConstantN('pfDesignOnly','LongWord').SetUInt( $00000002);
 CL.AddConstantN('pfRunOnly','LongWord').SetUInt( $00000004);
 CL.AddConstantN('pfIgnoreDupUnits','LongWord').SetUInt( $00000008);
 CL.AddConstantN('pfModuleTypeMask','LongWord').SetUInt( $C0000000);
 CL.AddConstantN('pfExeModule','LongWord').SetUInt( $00000000);
 CL.AddConstantN('pfPackageModule','LongWord').SetUInt( $40000000);
 CL.AddConstantN('pfProducerMask','LongWord').SetUInt( $0C000000);
 CL.AddConstantN('pfV3Produced','LongWord').SetUInt( $00000000);
 CL.AddConstantN('pfProducerUndefined','LongWord').SetUInt( $04000000);
 CL.AddConstantN('pfBCB4Produced','LongWord').SetUInt( $08000000);
 CL.AddConstantN('pfDelphi4Produced','LongWord').SetUInt( $0C000000);
 CL.AddConstantN('pfLibraryModule','LongWord').SetUInt( $80000000);
end;

(*----------------------------------------------------------------------------*)
procedure ExceptionMessage_W(Self: Exception; const T: string);
begin Self.Message := T; end;

(*----------------------------------------------------------------------------*)
procedure ExceptionMessage_R(Self: Exception; var T: string);
begin T := Self.Message; end;

(*----------------------------------------------------------------------------*)
procedure ExceptionHelpContext_W(Self: Exception; const T: Integer);
begin Self.HelpContext := T; end;

(*----------------------------------------------------------------------------*)
procedure ExceptionHelpContext_R(Self: Exception; var T: Integer);
begin T := Self.HelpContext; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SysUtils_Routines(S: TPSExec);
begin
 S.RegisterDelphiFunction(@CheckWin32Version, 'CheckWin32Version', cdRegister);
 S.RegisterDelphiFunction(@GetFileVersion, 'GetFileVersion', cdRegister);
 S.RegisterDelphiFunction(@CompareStr, 'CompareStr', cdRegister);
 S.RegisterDelphiFunction(@CompareText, 'CompareText', cdRegister);
 S.RegisterDelphiFunction(@SameText, 'SameText', cdRegister);
 S.RegisterDelphiFunction(@AnsiCompareStr, 'AnsiCompareStr', cdRegister);
 S.RegisterDelphiFunction(@AnsiSameStr, 'AnsiSameStr', cdRegister);
 S.RegisterDelphiFunction(@AnsiCompareText, 'AnsiCompareText', cdRegister);
 S.RegisterDelphiFunction(@AnsiSameText, 'AnsiSameText', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrComp, 'AnsiStrComp', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrIComp, 'AnsiStrIComp', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrLComp, 'AnsiStrLComp', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrLIComp, 'AnsiStrLIComp', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrLower, 'AnsiStrLower', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrUpper, 'AnsiStrUpper', cdRegister);
 S.RegisterDelphiFunction(@AnsiLastChar, 'AnsiLastChar', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrLastChar, 'AnsiStrLastChar', cdRegister);
 S.RegisterDelphiFunction(@WideUpperCase, 'WideUpperCase', cdRegister);
 S.RegisterDelphiFunction(@WideLowerCase, 'WideLowerCase', cdRegister);
 S.RegisterDelphiFunction(@WideCompareStr, 'WideCompareStr', cdRegister);
 S.RegisterDelphiFunction(@WideSameStr, 'WideSameStr', cdRegister);
 S.RegisterDelphiFunction(@WideCompareText, 'WideCompareText', cdRegister);
 S.RegisterDelphiFunction(@WideSameText, 'WideSameText', cdRegister);
 S.RegisterDelphiFunction(@QuotedStr, 'QuotedStr', cdRegister);
 S.RegisterDelphiFunction(@AnsiQuotedStr, 'AnsiQuotedStr', cdRegister);
 S.RegisterDelphiFunction(@AnsiExtractQuotedStr, 'AnsiExtractQuotedStr', cdRegister);
 S.RegisterDelphiFunction(@AnsiDequotedStr, 'AnsiDequotedStr', cdRegister);
 S.RegisterDelphiFunction(@AdjustLineBreaks, 'AdjustLineBreaks', cdRegister);
 S.RegisterDelphiFunction(@IsValidIdent, 'IsValidIdent', cdRegister);
 S.RegisterDelphiFunction(@IntToHex, 'IntToHex', cdRegister);
 S.RegisterDelphiFunction(@TryStrToInt, 'TryStrToInt', cdRegister);
 S.RegisterDelphiFunction(@TryStrToInt64, 'TryStrToInt64', cdRegister);
 S.RegisterDelphiFunction(@StrToBool, 'StrToBool', cdRegister);
 S.RegisterDelphiFunction(@StrToBoolDef, 'StrToBoolDef', cdRegister);
 S.RegisterDelphiFunction(@TryStrToBool, 'TryStrToBool', cdRegister);
 S.RegisterDelphiFunction(@BoolToStr, 'BoolToStr', cdRegister);
 S.RegisterDelphiFunction(@LoadStr, 'LoadStr', cdRegister);
 S.RegisterDelphiFunction(@FmtLoadStr, 'FmtLoadStr', cdRegister);
 S.RegisterDelphiFunction(@FileOpen, 'FileOpen', cdRegister);
 S.RegisterDelphiFunction(@FileCreate, 'FileCreate', cdRegister);
 S.RegisterDelphiFunction(@FileSeek, 'FileSeek', cdRegister);
 S.RegisterDelphiFunction(@FileClose, 'FileClose', cdRegister);
 S.RegisterDelphiFunction(@FileAge, 'FileAge', cdRegister);
 S.RegisterDelphiFunction(@FileExists, 'FileExists', cdRegister);
 S.RegisterDelphiFunction(@DirectoryExists, 'DirectoryExists', cdRegister);
 S.RegisterDelphiFunction(@ForceDirectories, 'ForceDirectories', cdRegister);
 S.RegisterDelphiFunction(@FindFirst, 'FindFirst', cdRegister);
 S.RegisterDelphiFunction(@FindNext, 'FindNext', cdRegister);
 S.RegisterDelphiFunction(@FindClose, 'FindClose', cdRegister);
 S.RegisterDelphiFunction(@FileGetDate, 'FileGetDate', cdRegister);
 S.RegisterDelphiFunction(@FileSetDate, 'FileSetDate', cdRegister);
 S.RegisterDelphiFunction(@FileIsReadOnly, 'FileIsReadOnly', cdRegister);
 S.RegisterDelphiFunction(@FileSetReadOnly, 'FileSetReadOnly', cdRegister);
 S.RegisterDelphiFunction(@DeleteFile, 'DeleteFile', cdRegister);
 S.RegisterDelphiFunction(@RenameFile, 'RenameFile', cdRegister);
 S.RegisterDelphiFunction(@ChangeFileExt, 'ChangeFileExt', cdRegister);
 S.RegisterDelphiFunction(@ExtractFilePath, 'ExtractFilePath', cdRegister);
 S.RegisterDelphiFunction(@ExtractFileDir, 'ExtractFileDir', cdRegister);
 S.RegisterDelphiFunction(@ExtractFileDrive, 'ExtractFileDrive', cdRegister);
 S.RegisterDelphiFunction(@ExtractFileName, 'ExtractFileName', cdRegister);
 S.RegisterDelphiFunction(@ExtractFileExt, 'ExtractFileExt', cdRegister);
 S.RegisterDelphiFunction(@ExpandFileName, 'ExpandFileName', cdRegister);
 S.RegisterDelphiFunction(@ExpandFileNameCase, 'ExpandFileNameCase', cdRegister);
 S.RegisterDelphiFunction(@ExpandUNCFileName, 'ExpandUNCFileName', cdRegister);
 S.RegisterDelphiFunction(@ExtractRelativePath, 'ExtractRelativePath', cdRegister);
 S.RegisterDelphiFunction(@ExtractShortPathName, 'ExtractShortPathName', cdRegister);
 S.RegisterDelphiFunction(@FileSearch, 'FileSearch', cdRegister);
 S.RegisterDelphiFunction(@DiskFree, 'DiskFree', cdRegister);
 S.RegisterDelphiFunction(@DiskSize, 'DiskSize', cdRegister);
 S.RegisterDelphiFunction(@FileDateToDateTime, 'FileDateToDateTime', cdRegister);
 S.RegisterDelphiFunction(@DateTimeToFileDate, 'DateTimeToFileDate', cdRegister);
 S.RegisterDelphiFunction(@GetCurrentDir, 'GetCurrentDir', cdRegister);
 S.RegisterDelphiFunction(@SetCurrentDir, 'SetCurrentDir', cdRegister);
 S.RegisterDelphiFunction(@CreateDir, 'CreateDir', cdRegister);
 S.RegisterDelphiFunction(@RemoveDir, 'RemoveDir', cdRegister);
 S.RegisterDelphiFunction(@Format, 'Format', cdRegister);
 S.RegisterDelphiFunction(@FmtStr, 'FmtStr', cdRegister);
 S.RegisterDelphiFunction(@StrFmt, 'StrFmt', cdRegister);
 S.RegisterDelphiFunction(@StrLFmt, 'StrLFmt', cdRegister);
 S.RegisterDelphiFunction(@WideFormat, 'WideFormat', cdRegister);
 S.RegisterDelphiFunction(@WideFmtStr, 'WideFmtStr', cdRegister);
 S.RegisterDelphiFunction(@FloatToStr, 'FloatToStr', cdRegister);
 S.RegisterDelphiFunction(@CurrToStr, 'CurrToStr', cdRegister);
 S.RegisterDelphiFunction(@FloatToCurr, 'FloatToCurr', cdRegister);
 S.RegisterDelphiFunction(@TryFloatToCurr, 'TryFloatToCurr', cdRegister);
 S.RegisterDelphiFunction(@FloatToStrF, 'FloatToStrF', cdRegister);
 S.RegisterDelphiFunction(@CurrToStrF, 'CurrToStrF', cdRegister);
 S.RegisterDelphiFunction(@FormatFloat, 'FormatFloat', cdRegister);
 S.RegisterDelphiFunction(@FormatCurr, 'FormatCurr', cdRegister);
 S.RegisterDelphiFunction(@StrToFloatDef, 'StrToFloatDef', cdRegister);
 S.RegisterDelphiFunction(@TryStrToFloat, 'TryStrToFloat', cdRegister);
 S.RegisterDelphiFunction(@TryStrToFloat, 'TryStrToFloat', cdRegister);
 S.RegisterDelphiFunction(@TryStrToFloat, 'TryStrToFloat', cdRegister);
 S.RegisterDelphiFunction(@StrToCurr, 'StrToCurr', cdRegister);
 S.RegisterDelphiFunction(@StrToCurrDef, 'StrToCurrDef', cdRegister);
 S.RegisterDelphiFunction(@TryStrToCurr, 'TryStrToCurr', cdRegister);
 S.RegisterDelphiFunction(@DateTimeToTimeStamp, 'DateTimeToTimeStamp', cdRegister);
 S.RegisterDelphiFunction(@TimeStampToDateTime, 'TimeStampToDateTime', cdRegister);
 S.RegisterDelphiFunction(@MSecsToTimeStamp, 'MSecsToTimeStamp', cdRegister);
 S.RegisterDelphiFunction(@TimeStampToMSecs, 'TimeStampToMSecs', cdRegister);
 S.RegisterDelphiFunction(@EncodeDate, 'EncodeDate', cdRegister);
 S.RegisterDelphiFunction(@EncodeTime, 'EncodeTime', cdRegister);
 S.RegisterDelphiFunction(@TryEncodeDate, 'TryEncodeDate', cdRegister);
 S.RegisterDelphiFunction(@TryEncodeTime, 'TryEncodeTime', cdRegister);
 S.RegisterDelphiFunction(@DecodeDate, 'DecodeDate', cdRegister);
 S.RegisterDelphiFunction(@DecodeDateFully, 'DecodeDateFully', cdRegister);
 S.RegisterDelphiFunction(@DecodeTime, 'DecodeTime', cdRegister);
 S.RegisterDelphiFunction(@DayOfWeek, 'DayOfWeek', cdRegister);
 S.RegisterDelphiFunction(@Date, 'Date', cdRegister);
 S.RegisterDelphiFunction(@Time, 'Time', cdRegister);
 S.RegisterDelphiFunction(@GetTime, 'GetTime', cdRegister);
 S.RegisterDelphiFunction(@Now, 'Now', cdRegister);
 S.RegisterDelphiFunction(@CurrentYear, 'CurrentYear', cdRegister);
 S.RegisterDelphiFunction(@IncMonth, 'IncMonth', cdRegister);
 S.RegisterDelphiFunction(@IncAMonth, 'IncAMonth', cdRegister);
 S.RegisterDelphiFunction(@ReplaceTime, 'ReplaceTime', cdRegister);
 S.RegisterDelphiFunction(@ReplaceDate, 'ReplaceDate', cdRegister);
 S.RegisterDelphiFunction(@IsLeapYear, 'IsLeapYear', cdRegister);
 S.RegisterDelphiFunction(@DateToStr, 'DateToStr', cdRegister);
 S.RegisterDelphiFunction(@TimeToStr, 'TimeToStr', cdRegister);
 S.RegisterDelphiFunction(@DateTimeToStr, 'DateTimeToStr', cdRegister);
 S.RegisterDelphiFunction(@StrToDate, 'StrToDate', cdRegister);
 S.RegisterDelphiFunction(@StrToDateDef, 'StrToDateDef', cdRegister);
 S.RegisterDelphiFunction(@TryStrToDate, 'TryStrToDate', cdRegister);
 S.RegisterDelphiFunction(@StrToTime, 'StrToTime', cdRegister);
 S.RegisterDelphiFunction(@StrToTimeDef, 'StrToTimeDef', cdRegister);
 S.RegisterDelphiFunction(@TryStrToTime, 'TryStrToTime', cdRegister);
 S.RegisterDelphiFunction(@StrToDateTime, 'StrToDateTime', cdRegister);
 S.RegisterDelphiFunction(@StrToDateTimeDef, 'StrToDateTimeDef', cdRegister);
 S.RegisterDelphiFunction(@TryStrToDateTime, 'TryStrToDateTime', cdRegister);
 S.RegisterDelphiFunction(@FormatDateTime, 'FormatDateTime', cdRegister);
 S.RegisterDelphiFunction(@DateTimeToString, 'DateTimeToString', cdRegister);
 S.RegisterDelphiFunction(@FloatToDateTime, 'FloatToDateTime', cdRegister);
 S.RegisterDelphiFunction(@TryFloatToDateTime, 'TryFloatToDateTime', cdRegister);
 S.RegisterDelphiFunction(@SysErrorMessage, 'SysErrorMessage', cdRegister);
 S.RegisterDelphiFunction(@Sleep, 'Sleep', CdStdCall);
 S.RegisterDelphiFunction(@Abort, 'Abort', cdRegister);
 S.RegisterDelphiFunction(@Beep, 'Beep', cdRegister);
 S.RegisterDelphiFunction(@ByteType, 'ByteType', cdRegister);
 S.RegisterDelphiFunction(@StrByteType, 'StrByteType', cdRegister);
 S.RegisterDelphiFunction(@ByteToCharLen, 'ByteToCharLen', cdRegister);
 S.RegisterDelphiFunction(@CharToByteLen, 'CharToByteLen', cdRegister);
 S.RegisterDelphiFunction(@ByteToCharIndex, 'ByteToCharIndex', cdRegister);
 S.RegisterDelphiFunction(@CharToByteIndex, 'CharToByteIndex', cdRegister);
 S.RegisterDelphiFunction(@StrCharLength, 'StrCharLength', cdRegister);
 S.RegisterDelphiFunction(@StrNextChar, 'StrNextChar', cdRegister);
 S.RegisterDelphiFunction(@CharLength, 'CharLength', cdRegister);
 S.RegisterDelphiFunction(@NextCharIndex, 'NextCharIndex', cdRegister);
 S.RegisterDelphiFunction(@IsPathDelimiter, 'IsPathDelimiter', cdRegister);
 S.RegisterDelphiFunction(@IsDelimiter, 'IsDelimiter', cdRegister);
 S.RegisterDelphiFunction(@IncludeTrailingPathDelimiter, 'IncludeTrailingPathDelimiter', cdRegister);
 S.RegisterDelphiFunction(@IncludeTrailingBackslash, 'IncludeTrailingBackslash', cdRegister);
 S.RegisterDelphiFunction(@ExcludeTrailingPathDelimiter, 'ExcludeTrailingPathDelimiter', cdRegister);
 S.RegisterDelphiFunction(@ExcludeTrailingBackslash, 'ExcludeTrailingBackslash', cdRegister);
 S.RegisterDelphiFunction(@LastDelimiter, 'LastDelimiter', cdRegister);
 S.RegisterDelphiFunction(@AnsiCompareFileName, 'AnsiCompareFileName', cdRegister);
 S.RegisterDelphiFunction(@SameFileName, 'SameFileName', cdRegister);
 S.RegisterDelphiFunction(@AnsiLowerCaseFileName, 'AnsiLowerCaseFileName', cdRegister);
 S.RegisterDelphiFunction(@AnsiUpperCaseFileName, 'AnsiUpperCaseFileName', cdRegister);
 S.RegisterDelphiFunction(@AnsiPos, 'AnsiPos', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrPos, 'AnsiStrPos', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrRScan, 'AnsiStrRScan', cdRegister);
 S.RegisterDelphiFunction(@AnsiStrScan, 'AnsiStrScan', cdRegister);
 S.RegisterDelphiFunction(@StringReplace, 'StringReplace', cdRegister);
 S.RegisterDelphiFunction(@WrapText, 'WrapText', cdRegister);
 S.RegisterDelphiFunction(@FindCmdLineSwitch, 'FindCmdLineSwitch', cdRegister);
 S.RegisterDelphiFunction(@Supports, 'Supports', cdRegister);
 S.RegisterDelphiFunction(@Supports, 'Supports', cdRegister);
 S.RegisterDelphiFunction(@Supports, 'Supports', cdRegister);
 S.RegisterDelphiFunction(@CreateGUID, 'CreateGUID', CdStdCall);
 S.RegisterDelphiFunction(@StringToGUID, 'StringToGUID', cdRegister);
 S.RegisterDelphiFunction(@GUIDToString, 'GUIDToString', cdRegister);
 S.RegisterDelphiFunction(@IsEqualGUID, 'IsEqualGUID', CdStdCall);
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_Exception(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(Exception) do
  begin
    RegisterConstructor(@Exception.Create, 'Create');
    RegisterConstructor(@Exception.CreateFmt, 'CreateFmt');
    RegisterConstructor(@Exception.CreateRes, 'CreateRes');
    RegisterConstructor(@Exception.CreateRes, 'CreateResStr');
    RegisterConstructor(@Exception.CreateResFmt, 'CreateResFmt');
    RegisterConstructor(@Exception.CreateResFmt, 'CreateResFmtStr');
    RegisterConstructor(@Exception.CreateHelp, 'CreateHelp');
    RegisterConstructor(@Exception.CreateFmtHelp, 'CreateFmtHelp');
    RegisterConstructor(@Exception.CreateResHelp, 'CreateResHelp');
    RegisterConstructor(@Exception.CreateResHelp, 'CreateResStrHelp');
    RegisterConstructor(@Exception.CreateResFmtHelp, 'CreateResFmtHelp');
    RegisterConstructor(@Exception.CreateResFmtHelp, 'CreateResStrFmtHelp');
    RegisterPropertyHelper(@ExceptionHelpContext_R,@ExceptionHelpContext_W,'HelpContext');
    RegisterPropertyHelper(@ExceptionMessage_R,@ExceptionMessage_W,'Message');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_SysUtils(CL: TPSRuntimeClassImporter);
begin
  RIRegister_Exception(CL);
  with CL.Add(EAbort) do
  with CL.Add(EOutOfMemory) do
  with CL.Add(EIntError) do
  with CL.Add(EDivByZero) do
  with CL.Add(ERangeError) do
  with CL.Add(EIntOverflow) do
  with CL.Add(EMathError) do
  with CL.Add(EInvalidOp) do
  with CL.Add(EZeroDivide) do
  with CL.Add(EOverflow) do
  with CL.Add(EUnderflow) do
  with CL.Add(EInvalidPointer) do
  with CL.Add(EInvalidCast) do
  with CL.Add(EConvertError) do
  with CL.Add(EAccessViolation) do
  with CL.Add(EPrivilege) do
  with CL.Add(EControlC) do

  with CL.Add(EVariantError) do
  with CL.Add(EPropReadOnly) do
  with CL.Add(EPropWriteOnly) do
  with CL.Add(EAssertionFailed) do
  with CL.Add(EIntfCastError) do
  with CL.Add(EInvalidContainer) do
  with CL.Add(EInvalidInsert) do
  with CL.Add(EPackageError) do
  with CL.Add(ESafecallException) do
end;

 
 
{ TPSImport_SysUtils }
(*----------------------------------------------------------------------------*)
procedure TPSImport_SysUtils.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_SysUtils(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_SysUtils.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_SysUtils(ri);
  RIRegister_SysUtils_Routines(CompExec.Exec); // comment it if no routines
end;
(*----------------------------------------------------------------------------*)
 
 
end.
